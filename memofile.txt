<CRUD (create, read, update, delete)가 정보를 다루는 핵심적인 방법>

1. cmd로 node 출력 방법
- node syntax/template.js  // node 폴더안에 하위 폴더 안에 파일 불러올경우 -> node 폴더명/파일 명
- node main.js // node폴더안에 파일 바로 불러올 경우 -> node main.js

2. 현재 위치 찾는법
- cmd창에 dir/w 치면 됨

3. 현재 위치 이동방법
- cd + 가고자하는 폴더명 -> cd nodejs ==> nodejs폴더로 옮겨짐
- node-js\nodejs\node fileread.js ==> fileread파일 실행
- 다시 처음위치로 가려면 -> cd.. 입력

4. nodejs 실행방법
- cmd창에 cd 입력후 폴더-> 배경화면 -> nodejs파일 주소 복붙

5. 다른 디렉토리 값 찾는법
1. C:\Users\justi\OneDrive\바탕 화면\node-js> 에서
2. node nodejs/readdir.js 입력

=========================================================================================

<JavaScript 템플릿 === 'a + ' 변수 ==> `a ${변수}`;>

`${변수}` 
--------------------------------
var number = [1,400,12,3,5,8];
var i = 0;
var total = 0;
while(i < number.length) {
    total = total + number[i];
    i = i+1;
}
console.log(`total : ${total}`);
--------------------------------
=========================================================================================

<1. Node.js 파일 읽기 ==> fs.readFile();>

1. 문법
var fs = require('fs');
fs.readFile('sample.txt', 'utf8', function(err, data) {
    console.log(data);
})

var fs = require('fs');
fs.readFile('읽고싶은 파일의 이름', 'utf8', function(콜백 , 변수명) {
    console.log(변수명);

=========================================================================================

<2. Node.js 파일 목록 알아내기 ==> fs.readdir(./data, function(err, filelist) {console.log(filelist);})>

var testFolder = './data';
var fs = require('fs');

fs.readdir(testFolder, function(err, filelist) {
    console.log(filelist);
})

fs.readdir('./읽고싶은 파일 디렉토리, function(콜백, 변수명){
    console.log(변수명);
})

=========================================================================================

<3. CallBack 설명>

var a = function () {          // 익명함수
    console.log('B');
}

console.log(a) ==> B출력


function showfunc (callback) {  // CallBack 형식 --> 인자 값으로 변수에 담겨있는 함수 => 매개변수로 함수가 담긴 변수 입력 => 인자 함수 출력 
    callback();
}

showfunc(a);

=========================================================================================

<동기 vs 비동기 형식 문법>
var result = fs.readFileSync('디렉토리/파일명', 'utf8'); ==> 변수 설정 가능 (동기)
fs.readFile('디렉토리/파일명', 'utf8', function(err, result) {};) ==> 변수설정 안됨 (변수가 함수 변수명값으로 들어감) ==> 콜백(비동기)

var fs = require('fs');

console.log('A');
var result = fs.readFileSync('syntax/sample.txt', 'utf8'); //sample.txt 값 =>  B
console.log(result);
console.log('C');

// A -> B -> C 순서

----------------------------------------------------------------------------------------------------------------------------------------
console.log('A');
fs.readFile('syntax/sample.txt', 'utf8', function(err, result) {
    console.log(result);
});
console.log('C');

//A --> C --> B 순서

=========================================================================================

<패키지 매니저 ==> NPM (NPM을 통해서 PM2 설치 --> npm install pm2 -g)>
1. 실행 ==> pm2 start main.js(파일명)로 실행 (CMD창에 입력)
2. 현재 실행되고 있는 프로그램 볼 수 있음 ==> pm2 monit
3. 프로그램 종료시 ==> pm2 stop main(파일명)
4. 소스코드 변경시 자동 변경 ==> pm2 strat main.js --watch
5. 코드 오류나 문제 생길 때 확인방법 ==> pm2 log

=========================================================================================

<HTML Form 태그>
1. textarea태그 ==> 텍스트창 안에 여러줄 입력할수있게 변환
2. input type="submit" ==> 전송버튼 만듬


<form action="http://localhost:3000/process_create" method="post">       --> 3. 데이터를 여기 서버에 보내라     5. method를 post방식으로 변경해야됨 (보안문제)
    <p><input type="text" name="title"></p>
        <p>
          <textarea name="description"></textarea>           --> 1. 데이터 입력           4. 데이터를 서버에 보내려면 이름이 있어야함 -> name 사용
        </p>
        <p>
            <input type="submit">                          --> 2. 데이터 전송 버튼 생성
        </p>
</form>

6. form 태그는 입력한 정보를 submit눌렀을때 form의 action속성이 가르키는 서버로 쿼리스트링 형태로 데이터를 전송해주는 기능.


1. post 방식으로 보낸 정보를 node.js로 가져오는 방법
1-1. request.on(data & end)를 사용해서 전송된 데이터를 가져옴
1-2. qs.parse(body) = querystring.parse를 통해 정보를 객체화 시킴

  } else if (pathname === '/create_process'){
    var body = '';
    request.on('data', function(data) {
      body = body + data;
    });
    request.on('end', function() {
      var post = qs.parse(body);
      var title = post.title;
      var description = post.description;
    });

    response.writeHead(200);
    response.end('success');
=========================================================================================

<post방식으로 전송된 데이터를 파일로 변환 및 주소 변경!>

1. fs.writeFile(원하는 디렉토리/파일명, 파일 내용, 인코딩, 콜백)
2. response.writeHead(302, {Location: 주소});
2-1. `data/${title}을 통해 웹 id값이 title 입력값으로 자동 변경 => id= justine25 ==> /?id=justine25로 변경

==> fs.writeFile(`data/${title}`, desciprtion(post.description), 'utf8, function(err) {
        response.writeHead(302, {Location: `/?id=${title}`});
        response.end();
    }
=========================================================================================

<file 삭제하는 방법>
1. fs.unlink(path/file명, 콜백)
=> fs.unlink(`data/${id}`, function(err) {
    response.writeHead(302, {Location: `/`});
    response.end();        
    })

<file 제목 및 내용 수정하는 방법>
1. fs.rename(old path/ new path, 콜백)
=>   fs.rename(`data/${id}`, `data/${title}`, function(err) {
      fs.writeFile(`data/${title}`, description, 'utf-8', function(err) {
       response.writeHead(302, {Location: `/?id=${title}`});
       response.end();
      })  

=========================================================================================